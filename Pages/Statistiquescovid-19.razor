@using stopcovid.Models
@using System.Linq

@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util


@page "/statistiquescovid-19"
<h1>Derniers nouvelle du covid-19</h1>
@inject HttpClient Http
<p> Cette page vous permet d'avoir les statistiques du virus covid-19 au maroc par r√©gion  </p>

@if (covidStats == null)
{
    <p><em>Veuillez patienter, chargement des donees...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Cas</th>
                <th>Morts</th>
                <th>Guerison</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var covidstat in covidStats)
            {
                <tr>
                    <td>@covidstat.Date.ToShortDateString()</td>
                    <td>@covidstat.Cas</td>
                    <td>@covidstat.Morts</td>
                    <td>@covidstat.Guerisons</td>
                </tr>
            }
        </tbody>
    </table>
    
}

<ChartJsBarChart @ref="_barCasChartJs" Config="@_casConfig" Width="600" Height="300" />
<ChartJsBarChart @ref="_mortCasChartJs" Config="@_mortConfig" Width="600" Height="300" />
<ChartJsBarChart @ref="_guerisCasChartJs" Config="@_guerisConfig" Width="600" Height="300" />

@code {
    private CovidStat[] covidStats;

    private BarConfig _casConfig;
    private BarConfig _mortConfig;
    private BarConfig _guerisConfig;

    private ChartJsBarChart _barCasChartJs;
    private ChartJsBarChart _mortCasChartJs;
    private ChartJsBarChart _guerisCasChartJs;

    protected override async Task OnInitializedAsync()
    {
        covidStats = await Http.GetFromJsonAsync<CovidStat[]>("sample-data/stat.json");
        covidStats = covidStats.OrderByDescending(c => c.Date).ToArray();
        
        var casBarSet = new BarDataset<TimeTuple<double>>
        {
            Label = "Evolution des cas Covid-19",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 1,
            HoverBackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.1),
            HoverBorderColor = "#020202",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        var mortBarSet = new BarDataset<TimeTuple<double>>
        {
            Label = "Evolution des morts Covid-19",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 1,
            HoverBackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.1),
            HoverBorderColor = "#020202",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        var guerisBarSet = new BarDataset<TimeTuple<double>>
        {
            Label = "Evolution des guerissons Covid-19",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 1,
            HoverBackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.1),
            HoverBorderColor = "#020202",
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        
        List<TimeTuple<double>> casData = new List<TimeTuple<double>>();
        List<TimeTuple<double>> mortData = new List<TimeTuple<double>>();
        List<TimeTuple<double>> guerisData = new List<TimeTuple<double>>();    

        foreach (var item in covidStats)
        {
            TimeTuple<double> casDataItem = new TimeTuple<double>((Moment)item.Date, (double)item.Cas);
            TimeTuple<double> mortDataItem = new TimeTuple<double>((Moment)item.Date, (double)item.Morts);
            TimeTuple<double> guerisDataItem = new TimeTuple<double>((Moment)item.Date, (double)item.Guerisons);

            casData.Add(casDataItem);
            mortData.Add(mortDataItem);
            guerisData.Add(guerisDataItem);

        } 

        
      
        casBarSet.AddRange(casData);
        mortBarSet.AddRange(mortData);
        guerisBarSet.AddRange(guerisData);

        _casConfig.Data.Datasets.Add(casBarSet);      
        _mortConfig.Data.Datasets.Add(mortBarSet);
        _guerisConfig.Data.Datasets.Add(guerisBarSet);

        
        
       
    }
    protected override void OnInitialized()
    {
        _casConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Statistiques Codid-19"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarTimeAxis
                        {
                            BarPercentage = 0.75,
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day
                            },
                            Offset = true
                        }
                },
                YAxes = new List<CartesianAxis>
                {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                },
                Responsive = true
            }
        };

        
        _mortConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Statistiques des morts du Codid-19"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarTimeAxis
                        {
                            BarPercentage = 0.75,
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day
                            },
                            Offset = true
                        }
                },
                YAxes = new List<CartesianAxis>
                {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                },
                Responsive = true
            }
        };

        _guerisConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Statistiques des guerissons du Codid-19"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarTimeAxis
                        {
                            BarPercentage = 0.75,
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day
                            },
                            Offset = true
                        }
                },
                YAxes = new List<CartesianAxis>
                {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                },
                Responsive = true
            }
        };
        
    }
    
}